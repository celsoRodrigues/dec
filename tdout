GPG(1)                                                                                              GNU Privacy Guard 2.2                                                                                             GPG(1)

NNAAMMEE
       ggppgg - OpenPGP encryption and signing tool

SSYYNNOOPPSSIISS
       ggppgg [----hhoommeeddiirr _d_i_r] [----ooppttiioonnss _f_i_l_e] [_o_p_t_i_o_n_s] _c_o_m_m_a_n_d [_a_r_g_s]

DDEESSCCRRIIPPTTIIOONN
       ggppgg  is  the  OpenPGP  part  of the GNU Privacy Guard (GnuPG). It is a tool to provide digital encryption and signing services using the OpenPGP standard. ggppgg features complete key management and all the bells and
       whistles you would expect from a full OpenPGP implementation.

       There are two main versions of GnuPG: GnuPG 1.x and GnuPG 2.x.  GnuPG 2.x supports modern encryption algorithms and thus should be preferred over GnuPG 1.x.  You only need to use GnuPG 1.x if your platform doesn't
       support GnuPG 2.x, or you need support for some features that GnuPG 2.x has deprecated, e.g., decrypting data created with PGP-2 keys.

       If you are looking for version 1 of GnuPG, you may find that version installed under the name ggppgg11.

RREETTUURRNN VVAALLUUEE
       The program returns 0 if there are no severe errors, 1 if at least a signature was bad, and other error codes for fatal errors.

       Note  that  signature verification requires exact knowledge of what has been signed and by whom it has beensigned.  Using only the return code is thus not an appropriate way to verify a signature by a script.  Ei‐
       ther make proper use or the status codes or use the ggppggvv tool which has been designed to make signature verification easy for scripts.

WWAARRNNIINNGGSS
       Use a good password for your user account and make sure that all security issues are always fixed on your machine.  Also employ diligent physical protection to your machine.  Consider to use a good passphrase as a
       last resort protection to your secret key in the case your machine gets stolen.  It is important that your secret key is never leaked.  Using an easy to carry around token or smartcard with the secret key is often
       a advisable.

       If you are going to verify detached signatures, make sure that the program knows about it; either give both filenames on the command line or use ‘-’ to specify STDIN.

       For scripted or other unattended use of ggppgg make sure to use the machine-parseable interface and not the default interface which is intended for direct use by humans.  The machine-parseable  interface  provides  a
       stable  and well documented API independent of the locale or future changes of ggppgg.  To enable this interface use the options ----wwiitthh--ccoolloonnss and ----ssttaattuuss--ffdd.  For certain operations the option ----ccoommmmaanndd--ffdd may come
       handy too.  See this man page and the file ‘_D_E_T_A_I_L_S’ for the specification of the interface.  Note that the GnuPG ``info'' pages as well as the PDF version of the GnuPG manual features a chapter on unattended  use
       of GnuPG.  As an alternative the library GGPPGGMMEE can be used as a high-level abstraction on top of that interface.

IINNTTEERROOPPEERRAABBIILLIITTYY
       GnuPG  tries  to  be a very flexible implementation of the OpenPGP standard. In particular, GnuPG implements many of the optional parts of the standard, such as the SHA-512 hash, and the ZLIB and BZIP2 compression
       algorithms. It is important to be aware that not all OpenPGP programs implement these optional algorithms and that by forcing their use via the ----cciipphheerr--aallggoo, ----ddiiggeesstt--aallggoo, ----cceerrtt--ddiiggeesstt--aallggoo, or  ----ccoommpprreessss--aallggoo
       options in GnuPG, it is possible to create a perfectly valid OpenPGP message, but one that cannot be read by the intended recipient.

       There  are  dozens  of variations of OpenPGP programs available, and each supports a slightly different subset of these optional algorithms.  For example, until recently, no (unhacked) version of PGP supported the
       BLOWFISH cipher algorithm. A message using BLOWFISH simply could not be read by a PGP user. By default, GnuPG uses the standard OpenPGP preferences system that will always do the right thing  and  create  messages
       that are usable by all recipients, regardless of which OpenPGP program they use. Only override this safe default if you really know what you are doing.

       If  you  absolutely  must  override the safe default, or if the preferences on a given key are invalid for some reason, you are far better off using the ----ppggpp66, ----ppggpp77, or ----ppggpp88 options. These options are safe as
       they do not force any particular algorithms in violation of OpenPGP, but rather reduce the available algorithms to a "PGP-safe" list.

CCOOMMMMAANNDDSS
       Commands are not distinguished from options except for the fact that only one command is allowed.  Generally speaking, irrelevant options are silently ignored, and may not be checked for correctness.

       ggppgg may be run with no commands. In this case it will print a warning perform a reasonable action depending on the type of file it is given as input (an encrypted message is decrypted, a signature is  verified,  a
       file containing keys is listed, etc.).

       If you run into any problems, please add the option ----vveerrbboossee to the invocation to see more diagnostics.

   CCoommmmaannddss nnoott ssppeecciiffiicc ttoo tthhee ffuunnccttiioonn

       ----vveerrssiioonn
              Print the program version and licensing information.  Note that you cannot abbreviate this command.

       ----hheellpp
       --hh     Print a usage message summarizing the most useful command-line options.  Note that you cannot arbitrarily abbreviate this command (though you can use its short form --hh).

       ----wwaarrrraannttyy
              Print warranty information.

       ----dduummpp--ooppttiioonnss
              Print a list of all available options and commands.  Note that you cannot abbreviate this command.

   CCoommmmaannddss ttoo sseelleecctt tthhee ttyyppee ooff ooppeerraattiioonn

       ----ssiiggnn
       --ss     Sign a message. This command may be combined with ----eennccrryypptt (to sign and encrypt a message), ----ssyymmmmeettrriicc (to sign and symmetrically encrypt a message), or both ----eennccrryypptt and ----ssyymmmmeettrriicc (to sign and encrypt
              a message that can be decrypted using a secret key or a passphrase).  The signing key is chosen by default or can be set explicitly using the ----llooccaall--uusseerr and ----ddeeffaauulltt--kkeeyy options.

       ----cclleeaarr--ssiiggnn
       ----cclleeaarrssiiggnn
              Make a cleartext signature.  The content in a cleartext signature is readable without any special software. OpenPGP software is only needed to verify the signature.  cleartext signatures may modify  end-of-
              line whitespace for platform independence and are not intended to be reversible.  The signing key is chosen by default or can be set explicitly using the ----llooccaall--uusseerr and ----ddeeffaauulltt--kkeeyy options.

       ----ddeettaacchh--ssiiggnn
       --bb     Make a detached signature.

       ----eennccrryypptt
       --ee     Encrypt  data  to  one  or  more  public  keys.  This  command  may  be  combined with ----ssiiggnn (to sign and encrypt a message), ----ssyymmmmeettrriicc (to encrypt a message that can be decrypted using a secret key or a
              passphrase), or ----ssiiggnn and ----ssyymmmmeettrriicc together (for a signed message that can be decrypted using a secret key or a passphrase).  ----rreecciippiieenntt and related options specify which public keys to use for encryp‐
              tion.

       ----ssyymmmmeettrriicc
       --cc     Encrypt  with a symmetric cipher using a passphrase. The default symmetric cipher used is AES-128, but may be chosen with the ----cciipphheerr--aallggoo option. This command may be combined with ----ssiiggnn (for a signed and
              symmetrically encrypted message), ----eennccrryypptt (for a message that may be decrypted via a secret key or a passphrase), or ----ssiiggnn and ----eennccrryypptt together (for a signed message that may be decrypted via a  secret
              key  or  a passphrase).  ggppgg caches the passphrase used for symmetric encryption so that a decrypt operation may not require that the user needs to enter the passphrase.  The option ----nnoo--ssyymmkkeeyy--ccaacchhee can be
              used to disable this feature.

       ----ssttoorree
              Store only (make a simple literal data packet).

       ----ddeeccrryypptt
       --dd     Decrypt the file given on the command line (or STDIN if no file is specified) and write it to STDOUT (or the file specified with ----oouuttppuutt). If the decrypted file is signed, the signature is  also  verified.
              This command differs from the default operation, as it never writes to the filename which is included in the file and it rejects files that don't begin with an encrypted message.

       ----vveerriiffyy
              Assume  that  the first argument is a signed file and verify it without generating any output.  With no arguments, the signature packet is read from STDIN.  If only one argument is given, the specified file
              is expected to include a complete signature.

              With more than one argument, the first argument should specify a file with a detached signature and the remaining files should contain the signed data. To read the signed data from STDIN,  use  ‘-’  as  the
              second filename.  For security reasons, a detached signature will not read the signed material from STDIN if not explicitly specified.

              Note:  If  the  option ----bbaattcchh is not used, ggppgg may assume that a single argument is a file with a detached signature, and it will try to find a matching data file by stripping certain suffixes.  Using this
              historical feature to verify a detached signature is strongly discouraged; you should always specify the data file explicitly.

              Note: When verifying a cleartext signature, ggppgg verifies only what makes up the cleartext signed data and not any extra data outside of the cleartext signature or the header  lines  directly  following  the
              dash  marker line.  The option ----oouuttppuutt may be used to write out the actual signed data, but there are other pitfalls with this format as well.  It is suggested to avoid cleartext signatures in favor of de‐
              tached signatures.

              Note: Sometimes the use of the ggppggvv tool is easier than using the full-fledged ggppgg with this option.  ggppggvv is designed to compare signed data against a list of trusted keys and returns with success only for
              a good signature.  It has its own manual page.

       ----mmuullttiiffiillee
              This modifies certain other commands to accept multiple files for processing on the command line or read from STDIN with each filename on a separate line. This allows for many files to be processed at once.
              ----mmuullttiiffiillee may currently be used along with ----vveerriiffyy, ----eennccrryypptt, and ----ddeeccrryypptt. Note that ----mmuullttiiffiillee ----vveerriiffyy may not be used with detached signatures.

       ----vveerriiffyy--ffiilleess
              Identical to ----mmuullttiiffiillee ----vveerriiffyy.

       ----eennccrryypptt--ffiilleess
              Identical to ----mmuullttiiffiillee ----eennccrryypptt.

       ----ddeeccrryypptt--ffiilleess
              Identical to ----mmuullttiiffiillee ----ddeeccrryypptt.

       ----lliisstt--kkeeyyss
       --kk
       ----lliisstt--ppuubblliicc--kkeeyyss
              List the specified keys.  If no keys are specified, then all keys from the configured public keyrings are listed.

              Never use the output of this command in scripts or other programs.  The output is intended only for humans and its format is likely to change.  The ----wwiitthh--ccoolloonnss option emits the output  in  a  stable,  ma‐
              chine-parseable format, which is intended for use by scripts and other programs.

       ----lliisstt--sseeccrreett--kkeeyyss
       --KK     List the specified secret keys.  If no keys are specified, then all known secret keys are listed.  A ## after the initial tags sseecc or ssssbb means that the secret key or subkey is currently not usable.  We also
              say that this key has been taken offline (for example, a primary key can be taken offline by exporting the key using the command ----eexxppoorrtt--sseeccrreett--ssuubbkkeeyyss).  A >> after these tags  indicate  that  the  key  is
              stored on a smartcard.  See also ----lliisstt--kkeeyyss.

       ----cchheecckk--ssiiggnnaattuurreess
       ----cchheecckk--ssiiggss
              Same  as  ----lliisstt--kkeeyyss,  but the key signatures are verified and listed too.  Note that for performance reasons the revocation status of a signing key is not shown.  This command has the same effect as using
              ----lliisstt--kkeeyyss with ----wwiitthh--ssiigg--cchheecckk.

              The status of the verification is indicated by a flag directly following the "sig" tag (and thus before the flags described below.  A "!" indicates that the signature has been successfully verified,  a  "-"
              denotes  a  bad signature and a "%" is used if an error occurred while checking the signature (e.g. a non supported algorithm).  Signatures where the public key is not available are not listed; to see their
              keyids the command ----lliisstt--ssiiggss can be used.

              For each signature listed, there are several flags in between the signature status flag and keyid.  These flags give additional information about each key signature.  From left to right, they are  the  num‐
              bers  1-3 for certificate check level (see ----aasskk--cceerrtt--lleevveell), "L" for a local or non-exportable signature (see ----llssiiggnn--kkeeyy), "R" for a nonRevocable signature (see the ----eeddiitt--kkeeyy command "nrsign"), "P" for a
              signature that contains a policy URL (see ----cceerrtt--ppoolliiccyy--uurrll), "N" for a signature that contains a notation (see ----cceerrtt--nnoottaattiioonn), "X" for an eXpired signature (see ----aasskk--cceerrtt--eexxppiirree), and the numbers 1-9 or
              "T" for 10 and above to indicate trust signature levels (see the ----eeddiitt--kkeeyy command "tsign").

       ----llooccaattee--kkeeyyss
       ----llooccaattee--eexxtteerrnnaall--kkeeyyss
              Locate  the  keys given as arguments.  This command basically uses the same algorithm as used when locating keys for encryption or signing and may thus be used to see what keys ggppgg might use.  In particular
              external methods as defined by ----aauuttoo--kkeeyy--llooccaattee may be used to locate a key.  Only public keys are listed.  The variant ----llooccaattee--eexxtteerrnnaall--kkeeyyss does not consider a locally existing key and can thus be  used
              to force the refresh of a key via the defined external methods.

       ----sshhooww--kkeeyyss
              This  commands takes OpenPGP keys as input and prints information about them in the same way the command ----lliisstt--kkeeyyss does for locally stored key.  In addition the list options sshhooww--uunnuussaabbllee--uuiiddss, sshhooww--uunnuuss‐‐
              aabbllee--ssuubbkkeeyyss, sshhooww--nnoottaattiioonnss and sshhooww--ppoolliiccyy--uurrllss are also enabled.  As usual for automated processing, this command should be combined with the option ----wwiitthh--ccoolloonnss.

       ----ffiinnggeerrpprriinntt
              List all keys (or the specified ones) along with their fingerprints. This is the same output as ----lliisstt--kkeeyyss but with the additional output of a line with the fingerprint. May also be combined with  ----cchheecckk--
              ssiiggnnaattuurreess.  If this command is given twice, the fingerprints of all secondary keys are listed too.  This command also forces pretty printing of fingerprints if the keyid format has been set to "none".

       ----lliisstt--ppaacckkeettss
              List  only  the  sequence  of packets.  This command is only useful for debugging.  When used with option ----vveerrbboossee the actual MPI values are dumped and not only their lengths.  Note that the output of this
              command may change with new releases.

       ----eeddiitt--ccaarrdd
       ----ccaarrdd--eeddiitt
              Present a menu to work with a smartcard. The subcommand "help" provides an overview on available commands. For a detailed description, please  see  the  Card  HOWTO  at  https://gnupg.org/documentation/how‐
              tos.html#GnuPG-cardHOWTO .

       ----ccaarrdd--ssttaattuuss
              Show the content of the smart card.

       ----cchhaannggee--ppiinn
              Present a menu to allow changing the PIN of a smartcard. This functionality is also available as the subcommand "passwd" with the ----eeddiitt--ccaarrdd command.

       ----ddeelleettee--kkeeyyss _n_a_m_e
              Remove  key from the public keyring. In batch mode either ----yyeess is required or the key must be specified by fingerprint. This is a safeguard against accidental deletion of multiple keys.  If the exclamation
              mark syntax is used with the fingerprint of a subkey only that subkey is deleted; if the exclamation mark is used with the fingerprint of the primary key the entire public key is deleted.

       ----ddeelleettee--sseeccrreett--kkeeyyss _n_a_m_e
              Remove key from the secret keyring. In batch mode the key must be specified by fingerprint.  The option ----yyeess can be used to advise gpg-agent not to request a confirmation.  This extra pre-caution  is  done
              because  ggppgg  can't  be sure that the secret key (as controlled by gpg-agent) is only used for the given OpenPGP public key.  If the exclamation mark syntax is used with the fingerprint of a subkey only the
              secret part of that subkey is deleted; if the exclamation mark is used with the fingerprint of the primary key only the secret part of the primary key is deleted.

       ----ddeelleettee--sseeccrreett--aanndd--ppuubblliicc--kkeeyy _n_a_m_e
              Same as ----ddeelleettee--kkeeyy, but if a secret key exists, it will be removed first. In batch mode the key must be specified by fingerprint.  The option ----yyeess can be used to advise gpg-agent not to request a confir‐
              mation.

       ----eexxppoorrtt
              Either  export  all keys from all keyrings (default keyrings and those registered via option ----kkeeyyrriinngg), or if at least one name is given, those of the given name. The exported keys are written to STDOUT or
              to the file given with option ----oouuttppuutt.  Use together with ----aarrmmoorr to mail those keys.

       ----sseenndd--kkeeyyss _k_e_y_I_D_s
              Similar to ----eexxppoorrtt but sends the keys to a keyserver.  Fingerprints may be used instead of key IDs.  Don't send your complete keyring to a keyserver --- select only those keys which are new or  changed  by
              you.  If no _k_e_y_I_D_s are given, ggppgg does nothing.

              Take care: Keyservers are by design write only systems and thus it is not possible to ever delete keys once they have been send to a keyserver.

       ----eexxppoorrtt--sseeccrreett--kkeeyyss
       ----eexxppoorrtt--sseeccrreett--ssuubbkkeeyyss
              Same  as ----eexxppoorrtt, but exports the secret keys instead.  The exported keys are written to STDOUT or to the file given with option ----oouuttppuutt.  This command is often used along with the option ----aarrmmoorr to allow
              for easy printing of the key for paper backup; however the external tool ppaappeerrkkeeyy does a better job of creating backups on paper.  Note that exporting a secret key can be a security  risk  if  the  exported
              keys are sent over an insecure channel.

              The second form of the command has the special property to render the secret part of the primary key useless; this is a GNU extension to OpenPGP and other implementations can not be expected to successfully
              import such a key.  Its intended use is in generating a full key with an additional signing subkey on a dedicated machine.  This command then exports the key without the primary key to the main machine.

              GnuPG may ask you to enter the passphrase for the key.  This is required, because the internal protection method of the secret key is different from the one specified by the OpenPGP protocol.

       ----eexxppoorrtt--sssshh--kkeeyy
              This command is used to export a key in the OpenSSH public key format.  It requires the specification of one key by the usual means and exports the latest valid subkey which has an authentication capability
              to STDOUT or to the file given with option ----oouuttppuutt.  That output can directly be added to ssh's ‘_a_u_t_h_o_r_i_z_e_d___k_e_y’ file.

              By  specifying the key to export using a key ID or a fingerprint suffixed with an exclamation mark (!), a specific subkey or the primary key can be exported.  This does not even require that the key has the
              authentication capability flag set.

       ----iimmppoorrtt
       ----ffaasstt--iimmppoorrtt
              Import/merge keys. This adds the given keys to the keyring. The fast version is currently just a synonym.

              There are a few other options which control how this command works.  Most notable here is the ----iimmppoorrtt--ooppttiioonnss mmeerrggee--oonnllyy option which does not insert new keys but does only the merging of  new  signatures,
              user-IDs and subkeys.

       ----rreecceeiivvee--kkeeyyss _k_e_y_I_D_s
       ----rreeccvv--kkeeyyss _k_e_y_I_D_s
              Import the keys with the given _k_e_y_I_D_s from a keyserver.

       ----rreeffrreesshh--kkeeyyss
              Request  updates  from  a keyserver for keys that already exist on the local keyring. This is useful for updating a key with the latest signatures, user IDs, etc. Calling this with no arguments will refresh
              the entire keyring.

       ----sseeaarrcchh--kkeeyyss _n_a_m_e_s
              Search the keyserver for the given _n_a_m_e_s. Multiple names given here will be joined together to create the search string for the keyserver.  Note that keyservers search for _n_a_m_e_s in a different  and  simpler
              way than gpg does.  The best choice is to use a mail address.  Due to data privacy reasons keyservers may even not even allow searching by user id or mail address and thus may only return results when being
              used with the ----rreeccvv--kkeeyy command to search by key fingerprint or keyid.

       ----ffeettcchh--kkeeyyss _U_R_I_s
              Retrieve keys located at the specified _U_R_I_s. Note that different installations of GnuPG may support different protocols (HTTP, FTP, LDAP, etc.).  When using HTTPS the system provided root  certificates  are
              used by this command.

       ----uuppddaattee--ttrruussttddbb
              Do  trust  database maintenance. This command iterates over all keys and builds the Web of Trust. This is an interactive command because it may have to ask for the "ownertrust" values for keys. The user has
              to give an estimation of how far she trusts the owner of the displayed key to correctly certify (sign) other keys. GnuPG only asks for the ownertrust value if it has not yet been assigned to  a  key.  Using
              the ----eeddiitt--kkeeyy menu, the assigned value can be changed at any time.

       ----cchheecckk--ttrruussttddbb
              Do  trust database maintenance without user interaction. From time to time the trust database must be updated so that expired keys or signatures and the resulting changes in the Web of Trust can be tracked.
              Normally, GnuPG will calculate when this is required and do it automatically unless ----nnoo--aauuttoo--cchheecckk--ttrruussttddbb is set. This command can be used to force a trust database check at any time.  The  processing  is
              identical to that of ----uuppddaattee--ttrruussttddbb but it skips keys with a not yet defined "ownertrust".

              For use with cron jobs, this command can be used together with ----bbaattcchh in which case the trust database check is done only if a check is needed. To force a run even in batch mode add the option ----yyeess.

       ----eexxppoorrtt--oowwnneerrttrruusstt
              Send the ownertrust values to STDOUT. This is useful for backup purposes as these values are the only ones which can't be re-created from a corrupted trustdb.  Example:
                  gpg --export-ownertrust > otrust.txt

       ----iimmppoorrtt--oowwnneerrttrruusstt
              Update the trustdb with the ownertrust values stored in ffiilleess (or STDIN if not given); existing values will be overwritten.  In case of a severely damaged trustdb and if you have a recent backup of the own‐
              ertrust values (e.g. in the file ‘_o_t_r_u_s_t_._t_x_t’), you may re-create the trustdb using these commands:
                  cd ~/.gnupg
                  rm trustdb.gpg
                  gpg --import-ownertrust < otrust.txt

       ----rreebbuuiilldd--kkeeyyddbb--ccaacchheess
              When updating from version 1.0.6 to 1.0.7 this command should be used to create signature caches in the keyring. It might be handy in other situations too.

       ----pprriinntt--mmdd _a_l_g_o
       ----pprriinntt--mmddss
              Print message digest of algorithm _a_l_g_o for all given files or STDIN.  With the second form (or a deprecated "*" for _a_l_g_o) digests for all available algorithms are printed.

       ----ggeenn--rraannddoomm _0_|_1_|_2 _c_o_u_n_t
              Emit _c_o_u_n_t random bytes of the given quality level 0, 1 or 2. If _c_o_u_n_t is not given or zero, an endless sequence of random bytes will be emitted.  If used with ----aarrmmoorr the output  will  be  base64  encoded.
              PLEASE, don't use this command unless you know what you are doing; it may remove precious entropy from the system!

       ----ggeenn--pprriimmee _m_o_d_e _b_i_t_s
              Use the source, Luke :-). The output format is subject to change with ant release.

       ----eennaarrmmoorr
       ----ddeeaarrmmoorr
              Pack or unpack an arbitrary input into/from an OpenPGP ASCII armor.  This is a GnuPG extension to OpenPGP and in general not very useful.

       ----ttooffuu--ppoolliiccyy {{aauuttoo||ggoooodd||uunnkknnoowwnn||bbaadd||aasskk}} _k_e_y_s
              Set the TOFU policy for all the bindings associated with the specified _k_e_y_s.  For more information about the meaning of the policies, see: [trust-model-tofu].  The _k_e_y_s may be specified either by their fin‐
              gerprint (preferred) or their keyid.

   HHooww ttoo mmaannaaggee yyoouurr kkeeyyss

       This section explains the main commands for key management.

       ----qquuiicckk--ggeenneerraattee--kkeeyy _u_s_e_r_-_i_d [_a_l_g_o [_u_s_a_g_e [_e_x_p_i_r_e]]]
       ----qquuiicckk--ggeenn--kkeeyy
              This is a simple command to generate a standard key with one user id.  In contrast to ----ggeenneerraattee--kkeeyy the key is generated directly without the need to answer a bunch of prompts.  Unless the option ----yyeess  is
              given, the key creation will be canceled if the given user id already exists in the keyring.

              If invoked directly on the console without any special options an answer to a ``Continue?'' style confirmation prompt is required.  In case the user id already exists in the keyring a second prompt to force
              the creation of the key will show up.

              If _a_l_g_o or _u_s_a_g_e are given, only the primary key is created and no prompts are shown.  To specify an expiration date but still create a primary and subkey use ``default'' or ``future-default'' for _a_l_g_o  and
              ``default''  for  _u_s_a_g_e.   For  a description of these optional arguments see the command ----qquuiicckk--aadddd--kkeeyy.  The _u_s_a_g_e accepts also the value ``cert'' which can be used to create a certification only primary
              key; the default is to a create certification and signing key.

              The _e_x_p_i_r_e argument can be used to specify an expiration date for the key.  Several formats are supported; commonly the ISO formats ``YYYY-MM-DD'' or ``YYYYMMDDThhmmss'' are used.  To make the key expire in
              N  seconds, N days, N weeks, N months, or N years use ``seconds=N'', ``Nd'', ``Nw'', ``Nm'', or ``Ny'' respectively.  Not specifying a value, or using ``-'' results in a key expiring in a reasonable default
              interval.  The values ``never'', ``none'' can be used for no expiration date.

              If this command is used with ----bbaattcchh, ----ppiinneennttrryy--mmooddee has been set to llooooppbbaacckk, and one of the passphrase options (----ppaasssspphhrraassee, ----ppaasssspphhrraassee--ffdd, or ppaasssspphhrraassee--ffiillee) is used, the supplied passphrase is used
              for the new key and the agent does not ask for it.  To create a key without any protection ----ppaasssspphhrraassee '''' may be used.

              To create an OpenPGP key from the keys available on the currently inserted smartcard, the special string ``card'' can be used for _a_l_g_o.  If the card features an encryption and a signing key, gpg will figure
              them out and creates an OpenPGP key consisting of the usual primary key and one subkey.  This works only with certain smartcards.  Note that the interactive ----ffuullll--ggeenn--kkeeyy command allows to do the same  but
              with greater flexibility in the selection of the smartcard keys.

              Note that it is possible to create a primary key and a subkey using non-default algorithms by using ``default'' and changing the default parameters using the option ----ddeeffaauulltt--nneeww--kkeeyy--aallggoo.

       ----qquuiicckk--sseett--eexxppiirree _f_p_r _e_x_p_i_r_e [*|_s_u_b_f_p_r_s]
              With  two  arguments given, directly set the expiration time of the primary key identified by _f_p_r to _e_x_p_i_r_e.  To remove the expiration time 00 can be used.  With three arguments and the third given as an as‐
              terisk, the expiration time of all non-revoked and not yet expired subkeys are set to _e_x_p_i_r_e.  With more than two arguments and a list of fingerprints given for _s_u_b_f_p_r_s,  all  non-revoked  subkeys  matching
              these fingerprints are set to _e_x_p_i_r_e.

       ----qquuiicckk--aadddd--kkeeyy _f_p_r [_a_l_g_o [_u_s_a_g_e [_e_x_p_i_r_e]]]
              Directly add a subkey to the key identified by the fingerprint _f_p_r.  Without the optional arguments an encryption subkey is added.  If any of the arguments are given a more specific subkey is added.

              _a_l_g_o  may  be any of the supported algorithms or curve names given in the format as used by key listings.  To use the default algorithm the string ``default'' or ``-'' can be used.  Supported algorithms are
              ``rsa'', ``dsa'', ``elg'', ``ed25519'', ``cv25519'', and other ECC curves.  For example the string ``rsa'' adds an RSA key with the default key length; a string ``rsa4096'' requests that the key  length  is
              4096  bits.   The  string ``future-default'' is an alias for the algorithm which will likely be used as default algorithm in future versions of gpg.  To list the supported ECC curves the command ggppgg ----wwiitthh--
              ccoolloonnss ----lliisstt--ccoonnffiigg ccuurrvvee can be used.

              Depending on the given _a_l_g_o the subkey may either be an encryption subkey or a signing subkey.  If an algorithm is capable of signing and encryption and such a subkey is desired,  a  _u_s_a_g_e  string  must  be
              given.   This string is either ``default'' or ``-'' to keep the default or a comma delimited list (or space delimited list) of keywords: ``sign'' for a signing subkey, ``auth'' for an authentication subkey,
              and ``encr'' for an encryption subkey (``encrypt'' can be used as alias for ``encr'').  The valid combinations depend on the algorithm.

              The _e_x_p_i_r_e argument can be used to specify an expiration date for the key.  Several formats are supported; commonly the ISO formats ``YYYY-MM-DD'' or ``YYYYMMDDThhmmss'' are used.  To make the key expire in
              N  seconds, N days, N weeks, N months, or N years use ``seconds=N'', ``Nd'', ``Nw'', ``Nm'', or ``Ny'' respectively.  Not specifying a value, or using ``-'' results in a key expiring in a reasonable default
              interval.  The values ``never'', ``none'' can be used for no expiration date.

       ----ggeenneerraattee--kkeeyy
       ----ggeenn--kkeeyy
              Generate a new key pair using the current default parameters.  This is the standard command to create a new key.  In addition to the key a revocation certificate is created and stored  in  the  ‘_o_p_e_n_p_g_p_-_r_e_‐
              _v_o_c_s_._d’ directory below the GnuPG home directory.

       ----ffuullll--ggeenneerraattee--kkeeyy
       ----ffuullll--ggeenn--kkeeyy
              Generate a new key pair with dialogs for all options.  This is an extended version of ----ggeenneerraattee--kkeeyy.

              There is also a feature which allows you to create keys in batch mode. See the manual section ``Unattended key generation'' on how to use this.

       ----ggeenneerraattee--rreevvooccaattiioonn _n_a_m_e
       ----ggeenn--rreevvookkee _n_a_m_e
              Generate a revocation certificate for the complete key.  To only revoke a subkey or a key signature, use the ----eeddiitt command.

              This  command  merely creates the revocation certificate so that it can be used to revoke the key if that is ever needed.  To actually revoke a key the created revocation certificate needs to be merged with
              the key to revoke.  This is done by importing the revocation certificate using the ----iimmppoorrtt command.  Then the revoked key needs to be published, which is best done by sending the key to a  keyserver  (com‐
              mand ----sseenndd--kkeeyy) and by exporting (----eexxppoorrtt) it to a file which is then send to frequent communication partners.

       ----ggeenneerraattee--ddeessiiggnnaatteedd--rreevvooccaattiioonn _n_a_m_e
       ----ddeessiigg--rreevvookkee _n_a_m_e
              Generate a designated revocation certificate for a key. This allows a user (with the permission of the keyholder) to revoke someone else's key.

       ----eeddiitt--kkeeyy
              Present a menu which enables you to do most of the key management related tasks.  It expects the specification of a key on the command line.

              uuiidd _n  Toggle selection of user ID or photographic user ID with index _n.  Use ** to select all and 00 to deselect all.

              kkeeyy _n  Toggle selection of subkey with index _n or key ID _n.  Use ** to select all and 00 to deselect all.

              ssiiggnn   Make  a  signature on key of user nnaammee. If the key is not yet signed by the default user (or the users given with --uu), the program displays the information of the key again, together with its finger‐
                     print and asks whether it should be signed. This question is repeated for all users specified with --uu.

              llssiiggnn  Same as "sign" but the signature is marked as non-exportable and will therefore never be used by others. This may be used to make keys valid only in the local environment.

              nnrrssiiggnn Same as "sign" but the signature is marked as non-revocable and can therefore never be revoked.

              ttssiiggnn  Make a trust signature. This is a signature that combines the notions of certification (like a regular signature), and trust (like the "trust" command). It is generally only useful in distinct commu‐
                     nities or groups.  For more information please read the sections ``Trust Signature'' and ``Regular Expression'' in RFC-4880.

              Note that "l" (for local / non-exportable), "nr" (for non-revocable, and "t" (for trust) may be freely mixed and prefixed to "sign" to create a signature of any type desired.

       If the option ----oonnllyy--ssiiggnn--tteexxtt--iiddss is specified, then any non-text based user ids (e.g., photo IDs) will not be selected for signing.

              ddeellssiigg Delete a signature. Note that it is not possible to retract a signature, once it has been send to the public (i.e. to a keyserver).  In that case you better use rreevvssiigg.

              rreevvssiigg Revoke a signature. For every signature which has been generated by one of the secret keys, GnuPG asks whether a revocation certificate should be generated.

              cchheecckk  Check the signatures on all selected user IDs.  With the extra option sseellffssiigg only self-signatures are shown.

              aadddduuiidd Create an additional user ID.

              aaddddpphhoottoo
                     Create  a  photographic user ID. This will prompt for a JPEG file that will be embedded into the user ID. Note that a very large JPEG will make for a very large key. Also note that some programs will
                     display your JPEG unchanged (GnuPG), and some programs will scale it to fit in a dialog box (PGP).

              sshhoowwpphhoottoo
                     Display the selected photographic user ID.

              ddeelluuiidd Delete a user ID or photographic user ID.  Note that it is not possible to retract a user id, once it has been send to the public (i.e. to a keyserver).  In that case you better use rreevvuuiidd.

              rreevvuuiidd Revoke a user ID or photographic user ID.

              pprriimmaarryy
                     Flag the current user id as the primary one, removes the primary user id flag from all other user ids and sets the timestamp of all affected self-signatures one second  ahead.  Note  that  setting  a
                     photo user ID as primary makes it primary over other photo user IDs, and setting a regular user ID as primary makes it primary over other regular user IDs.

              kkeeyysseerrvveerr
                     Set  a  preferred  keyserver  for  the  specified user ID(s). This allows other users to know where you prefer they get your key from. See ----kkeeyysseerrvveerr--ooppttiioonnss hhoonnoorr--kkeeyysseerrvveerr--uurrll for more on how this
                     works.  Setting a value of "none" removes an existing preferred keyserver.

              nnoottaattiioonn
                     Set a name=value notation for the specified user ID(s). See ----cceerrtt--nnoottaattiioonn for more on how this works. Setting a value of "none" removes all notations, setting a notation prefixed with a minus  sign
                     (-) removes that notation, and setting a notation name (without the =value) prefixed with a minus sign removes all notations with that name.

              pprreeff   List preferences from the selected user ID. This shows the actual preferences, without including any implied preferences.

              sshhoowwpprreeff
                     More  verbose  preferences listing for the selected user ID. This shows the preferences in effect by including the implied preferences of 3DES (cipher), SHA-1 (digest), and Uncompressed (compression)
                     if they are not already included in the preference list. In addition, the preferred keyserver and signature notations (if any) are shown.

              sseettpprreeff _s_t_r_i_n_g
                     Set the list of user ID preferences to _s_t_r_i_n_g for all (or just the selected) user IDs. Calling setpref with no arguments sets the preference list to the default (either built-in or set via ----ddeeffaauulltt--
                     pprreeffeerreennccee--lliisstt),  and  calling  setpref with "none" as the argument sets an empty preference list. Use ggppgg ----vveerrssiioonn to get a list of available algorithms. Note that while you can change the prefer‐
                     ences on an attribute user ID (aka "photo ID"), GnuPG does not select keys via attribute user IDs so these preferences will not be used by GnuPG.

                     When setting preferences, you should list the algorithms in the order which you'd like to see them used by someone else when encrypting a message to your key.  If you don't include 3DES, it  will  be
                     automatically added at the end.  Note that there are many factors that go into choosing an algorithm (for example, your key may not be the only recipient), and so the remote OpenPGP application being
                     used to send to you may or may not follow your exact chosen order for a given message.  It will, however, only choose an algorithm that is present on the preference list of every recipient key.   See
                     also the INTEROPERABILITY WITH OTHER OPENPGP PROGRAMS section below.

              aaddddkkeeyy Add a subkey to this key.

              aaddddccaarrddkkeeyy
                     Generate a subkey on a card and add it to this key.

              kkeeyyttooccaarrdd
                     Transfer  the  selected  secret subkey (or the primary key if no subkey has been selected) to a smartcard. The secret key in the keyring will be replaced by a stub if the key could be stored success‐
                     fully on the card and you use the save command later. Only certain key types may be transferred to the card. A sub menu allows you to select on what card to store the key. Note that it is not  possi‐
                     ble to get that key back from the card - if the card gets broken your secret key will be lost unless you have a backup somewhere.

              bbkkuuppttooccaarrdd _f_i_l_e
                     Restore  the  given  _f_i_l_e to a card. This command may be used to restore a backup key (as generated during card initialization) to a new card. In almost all cases this will be the encryption key. You
                     should use this command only with the corresponding public key and make sure that the file given as argument is indeed the backup to restore. You should then select 2 to restore  as  encryption  key.
                     You will first be asked to enter the passphrase of the backup key and then for the Admin PIN of the card.

              ddeellkkeeyy Remove a subkey (secondary key). Note that it is not possible to retract a subkey, once it has been send to the public (i.e. to a keyserver).  In that case you better use rreevvkkeeyy.  Also note that this
                     only deletes the public part of a key.

              rreevvkkeeyy Revoke a subkey.

              eexxppiirree Change the key or subkey expiration time. If a subkey is selected, the expiration time of this subkey will be changed. With no selection, the key expiration of the primary key is changed.

              ttrruusstt  Change the owner trust value for the key. This updates the trust-db immediately and no save is required.

              ddiissaabbllee
              eennaabbllee Disable or enable an entire key. A disabled key can not normally be used for encryption.

              aaddddrreevvookkeerr
                     Add a designated revoker to the key. This takes one optional argument: "sensitive". If a designated revoker is marked as sensitive, it will not be exported by default (see export-options).

              ppaasssswwdd Change the passphrase of the secret key.

              ttooggggllee This is dummy command which exists only for backward compatibility.

              cclleeaann  Compact (by removing all signatures except the selfsig) any user ID that is no longer usable (e.g. revoked, or expired). Then, remove any signatures that are not usable  by  the  trust  calculations.
                     Specifically,  this  removes any signature that does not validate, any signature that is superseded by a later signature, revoked signatures, and signatures issued by keys that are not present on the
                     keyring.

              mmiinniimmiizzee
                     Make the key as small as possible. This removes all signatures from each user ID except for the most recent self-signature.

              cchhaannggee--uussaaggee
                     Change the usage flags (capabilities) of the primary key or of subkeys.  These usage flags (e.g. Certify, Sign, Authenticate, Encrypt) are set during key creation.  Sometimes it is useful to have the
                     opportunity to change them (for example to add Authenticate) after they have been created.  Please take care when doing this; the allowed usage flags depend on the key algorithm.

              ccrroossss--cceerrttiiffyy
                     Add  cross-certification  signatures  to signing subkeys that may not currently have them. Cross-certification signatures protect against a subtle attack against signing subkeys. See ----rreeqquuiirree--ccrroossss--
                     cceerrttiiffiiccaattiioonn.  All new keys generated have this signature by default, so this command is only useful to bring older keys up to date.

              ssaavvee   Save all changes to the keyrings and quit.

              qquuiitt   Quit the program without updating the keyrings.

              The listing shows you the key with its secondary keys and all user IDs.  The primary user ID is indicated by a dot, and selected keys or user IDs are indicated by an asterisk.  The trust value is  displayed
              with  the  primary  key:  "trust"  is the assigned owner trust and "validity" is the calculated validity of the key.  Validity values are also displayed for all user IDs.  For possible values of trust, see:
              [trust-values].

       ----ssiiggnn--kkeeyy _n_a_m_e
              Signs a public key with your secret key. This is a shortcut version of the subcommand "sign" from ----eeddiitt.

       ----llssiiggnn--kkeeyy _n_a_m_e
              Signs a public key with your secret key but marks it as non-exportable. This is a shortcut version of the subcommand "lsign" from ----eeddiitt--kkeeyy.

       ----qquuiicckk--ssiiggnn--kkeeyy _f_p_r [_n_a_m_e_s]
       ----qquuiicckk--llssiiggnn--kkeeyy _f_p_r [_n_a_m_e_s]
              Directly sign a key from the passphrase without any further user interaction.  The _f_p_r must be the verified primary fingerprint of a key in the local keyring. If no _n_a_m_e_s are given, all useful user ids  are
              signed;  with given [_n_a_m_e_s] only useful user ids matching one of theses names are signed.  By default, or if a name is prefixed with a '*', a case insensitive substring match is used.  If a name is prefixed
              with a '=' a case sensitive exact match is done.

              The command ----qquuiicckk--llssiiggnn--kkeeyy marks the signatures as non-exportable.  If such a non-exportable signature already exists the ----qquuiicckk--ssiiggnn--kkeeyy turns it into a exportable signature.

              This command uses reasonable defaults and thus does not provide the full flexibility of the "sign" subcommand from ----eeddiitt--kkeeyy.  Its intended use is to help unattended key signing by utilizing a list of ver‐
              ified fingerprints.

       ----qquuiicckk--aadddd--uuiidd _u_s_e_r_-_i_d _n_e_w_-_u_s_e_r_-_i_d
              This  command adds a new user id to an existing key.  In contrast to the interactive sub-command aadddduuiidd of ----eeddiitt--kkeeyy the _n_e_w_-_u_s_e_r_-_i_d is added verbatim with only leading and trailing white space removed, it
              is expected to be UTF-8 encoded, and no checks on its form are applied.

       ----qquuiicckk--rreevvookkee--uuiidd _u_s_e_r_-_i_d _u_s_e_r_-_i_d_-_t_o_-_r_e_v_o_k_e
              This command revokes a user ID on an existing key.  It cannot be used to revoke the last user ID on key (some non-revoked user ID must remain), with revocation reason ``User ID is no longer valid''.  If you
              want to specify a different revocation reason, or to supply supplementary revocation text, you should use the interactive sub-command rreevvuuiidd of ----eeddiitt--kkeeyy.

       ----qquuiicckk--rreevvookkee--ssiigg _f_p_r _s_i_g_n_i_n_g_-_f_p_r [_n_a_m_e_s]
              This  command  revokes  the key signatures made by _s_i_g_n_i_n_g_-_f_p_r from the key specified by the fingerprint _f_p_r.  With _n_a_m_e_s given only the signatures on user ids of the key matching any of the given names are
              affected (see ----qquuiicckk--ssiiggnn--kkeeyy).  If a revocation already exists a notice is printed instead of creating a new revocation; no error is returned in this case.  Note that key signature revocations may be  su‐
              perseded by a newer key signature and in turn again revoked.

       ----qquuiicckk--sseett--pprriimmaarryy--uuiidd _u_s_e_r_-_i_d _p_r_i_m_a_r_y_-_u_s_e_r_-_i_d
              This  command sets or updates the primary user ID flag on an existing key.  _u_s_e_r_-_i_d specifies the key and _p_r_i_m_a_r_y_-_u_s_e_r_-_i_d the user ID which shall be flagged as the primary user ID.  The primary user ID flag
              is removed from all other user ids and the timestamp of all affected self-signatures is set one second ahead.

       ----cchhaannggee--ppaasssspphhrraassee _u_s_e_r_-_i_d
       ----ppaasssswwdd _u_s_e_r_-_i_d
              Change the passphrase of the secret key belonging to the certificate specified as _u_s_e_r_-_i_d.  This is a shortcut for the sub-command ppaasssswwdd of the edit key menu.  When using together with the option ----ddrryy--rruunn
              this will not actually change the passphrase but check that the current passphrase is correct.

OOPPTTIIOONNSS
       ggppgg features a bunch of options to control the exact behaviour and to change the default configuration.

       Long  options  can  be  put  in  an  options file (default "~/.gnupg/gpg.conf"). Short option names will not work - for example, "armor" is a valid option for the options file, while "a" is not. Do not write the 2
       dashes, but simply the name of the option and any required arguments. Lines with a hash ('#') as the first non-white-space character are ignored. Commands may be put in this file too, but  that  is  not  generally
       useful as the command will execute automatically with every execution of gpg.

       Please remember that option parsing stops as soon as a non-option is encountered, you can explicitly stop parsing by using the special option ----.

   HHooww ttoo cchhaannggee tthhee ccoonnffiigguurraattiioonn

       These options are used to change the configuration and are usually found in the option file.

       ----ddeeffaauulltt--kkeeyy _n_a_m_e
              Use  _n_a_m_e  as the default key to sign with. If this option is not used, the default key is the first key found in the secret keyring.  Note that --uu or ----llooccaall--uusseerr overrides this option.  This option may be
              given multiple times.  In this case, the last key for which a secret key is available is used.  If there is no secret key available for any of the specified values, GnuPG will not emit an error message  but
              continue as if this option wasn't given.

       ----ddeeffaauulltt--rreecciippiieenntt _n_a_m_e
              Use _n_a_m_e as default recipient if option ----rreecciippiieenntt is not used and don't ask if this is a valid one. _n_a_m_e must be non-empty.

       ----ddeeffaauulltt--rreecciippiieenntt--sseellff
              Use the default key as default recipient if option ----rreecciippiieenntt is not used and don't ask if this is a valid one. The default key is the first one from the secret keyring or the one set with ----ddeeffaauulltt--kkeeyy.

       ----nnoo--ddeeffaauulltt--rreecciippiieenntt
              Reset ----ddeeffaauulltt--rreecciippiieenntt and ----ddeeffaauulltt--rreecciippiieenntt--sseellff.

       --vv,, ----vveerrbboossee
              Give more information during processing. If used twice, the input data is listed in detail.

       ----nnoo--vveerrbboossee
              Reset verbose level to 0.

       --qq,, ----qquuiieett
              Try to be as quiet as possible.

       ----bbaattcchh
       ----nnoo--bbaattcchh
              Use  batch  mode.  Never ask, do not allow interactive commands.  ----nnoo--bbaattcchh disables this option.  Note that even with a filename given on the command line, gpg might still need to read from STDIN (in par‐
              ticular if gpg figures that the input is a detached signature and no data file has been specified).  Thus if you do not want to feed data via STDIN, you should connect STDIN to g‘_/_d_e_v_/_n_u_l_l’.

              It is highly recommended to use this option along with the options ----ssttaattuuss--ffdd and ----wwiitthh--ccoolloonnss for any unattended use of ggppgg.

       ----nnoo--ttttyy
              Make sure that the TTY (terminal) is never used for any output.  This option is needed in some cases because GnuPG sometimes prints warnings to the TTY even if ----bbaattcchh is used.

       ----yyeess  Assume "yes" on most questions.

       ----nnoo   Assume "no" on most questions.

       ----lliisstt--ooppttiioonnss _p_a_r_a_m_e_t_e_r_s
              This is a space or comma delimited string that gives options used when listing keys and signatures (that is, ----lliisstt--kkeeyyss, ----cchheecckk--ssiiggnnaattuurreess, ----lliisstt--ppuubblliicc--kkeeyyss, ----lliisstt--sseeccrreett--kkeeyyss, and the ----eeddiitt--kkeeyy func‐
              tions).  Options can be prepended with a nnoo-- (after the two dashes) to give the opposite meaning.  The options are:

              sshhooww--pphhoottooss
                     Causes  ----lliisstt--kkeeyyss, ----cchheecckk--ssiiggnnaattuurreess, ----lliisstt--ppuubblliicc--kkeeyyss, and ----lliisstt--sseeccrreett--kkeeyyss to display any photo IDs attached to the key.  Defaults to no. See also ----pphhoottoo--vviieewweerr.  Does not work with ----wwiitthh--
                     ccoolloonnss: see ----aattttrriibbuuttee--ffdd for the appropriate way to get photo data for scripts and other frontends.

              sshhooww--uussaaggee
                     Show usage information for keys and subkeys in the standard key listing.  This is a list of letters indicating the allowed usage for a key  (EE=encryption,  SS=signing,  CC=certification,  AA=authentica‐
                     tion).  Defaults to yes.

              sshhooww--ppoolliiccyy--uurrllss
                     Show policy URLs in the  ----cchheecckk--ssiiggnnaattuurreess listings.  Defaults to no.

              sshhooww--nnoottaattiioonnss
              sshhooww--ssttdd--nnoottaattiioonnss
              sshhooww--uusseerr--nnoottaattiioonnss
                     Show all, IETF standard, or user-defined signature notations in the ----cchheecckk--ssiiggnnaattuurreess listings. Defaults to no.

              sshhooww--kkeeyysseerrvveerr--uurrllss
                     Show any preferred keyserver URL in the ----cchheecckk--ssiiggnnaattuurreess listings. Defaults to no.

              sshhooww--uuiidd--vvaalliiddiittyy
                     Display the calculated validity of user IDs during key listings.  Defaults to yes.

              sshhooww--uunnuussaabbllee--uuiiddss
                     Show revoked and expired user IDs in key listings. Defaults to no.

              sshhooww--uunnuussaabbllee--ssuubbkkeeyyss
                     Show revoked and expired subkeys in key listings. Defaults to no.

              sshhooww--kkeeyyrriinngg
                     Display the keyring name at the head of key listings to show which keyring a given key resides on. Defaults to no.

              sshhooww--ssiigg--eexxppiirree
                     Show signature expiration dates (if any) during ----cchheecckk--ssiiggnnaattuurreess listings. Defaults to no.

              sshhooww--ssiigg--ssuubbppaacckkeettss
                     Include  signature  subpackets in the key listing. This option can take an optional argument list of the subpackets to list. If no argument is passed, list all subpackets. Defaults to no. This option
                     is only meaningful when using ----wwiitthh--ccoolloonnss along with ----cchheecckk--ssiiggnnaattuurreess.

              sshhooww--oonnllyy--ffpprr--mmbbooxx
                     For each user-id which has a valid mail address print only the fingerprint followed by the mail address.

       ----vveerriiffyy--ooppttiioonnss _p_a_r_a_m_e_t_e_r_s
              This is a space or comma delimited string that gives options used when verifying signatures. Options can be prepended with a `no-' to give the opposite meaning. The options are:

              sshhooww--pphhoottooss
                     Display any photo IDs present on the key that issued the signature.  Defaults to no. See also ----pphhoottoo--vviieewweerr.

              sshhooww--ppoolliiccyy--uurrllss
                     Show policy URLs in the signature being verified. Defaults to yes.

              sshhooww--nnoottaattiioonnss
              sshhooww--ssttdd--nnoottaattiioonnss
              sshhooww--uusseerr--nnoottaattiioonnss
                     Show all, IETF standard, or user-defined signature notations in the signature being verified. Defaults to IETF standard.

              sshhooww--kkeeyysseerrvveerr--uurrllss
                     Show any preferred keyserver URL in the signature being verified.  Defaults to yes.

              sshhooww--uuiidd--vvaalliiddiittyy
                     Display the calculated validity of the user IDs on the key that issued the signature. Defaults to yes.

              sshhooww--uunnuussaabbllee--uuiiddss
                     Show revoked and expired user IDs during signature verification.  Defaults to no.

              sshhooww--pprriimmaarryy--uuiidd--oonnllyy
                     Show only the primary user ID during signature verification.  That is all the AKA lines as well as photo Ids are not shown with the signature verification status.

              ppkkaa--llooookkuuppss
                     Enable PKA lookups to verify sender addresses. Note that PKA is based on DNS, and so enabling this option may disclose information on when and what signatures are verified or  to  whom  data  is  en‐
                     crypted. This is similar to the "web bug" described for the ----aauuttoo--kkeeyy--rreettrriieevvee option.

              ppkkaa--ttrruusstt--iinnccrreeaassee
                     Raise the trust in a signature to full if the signature passes PKA validation. This option is only meaningful if pka-lookups is set.

       ----eennaabbllee--llaarrggee--rrssaa
       ----ddiissaabbllee--llaarrggee--rrssaa
              With  --generate-key  and --batch, enable the creation of RSA secret keys as large as 8192 bit.  Note: 8192 bit is more than is generally recommended.  These large keys don't significantly improve security,
              but they are more expensive to use, and their signatures and certifications are larger.  This option is only available if the binary was build with large-secmem support.

       ----eennaabbllee--ddssaa22
       ----ddiissaabbllee--ddssaa22
              Enable hash truncation for all DSA keys even for old DSA Keys up to 1024 bit.  This is also the default with ----ooppeennppggpp.  Note that older versions of GnuPG also required this flag to allow the generation  of
              DSA larger than 1024 bit.

       ----pphhoottoo--vviieewweerr _s_t_r_i_n_g
              This  is  the  command  line  that  should be run to view a photo ID. "%i" will be expanded to a filename containing the photo. "%I" does the same, except the file will not be deleted once the viewer exits.
              Other flags are "%k" for the key ID, "%K" for the long key ID, "%f" for the key fingerprint, "%t" for the extension of the image type (e.g. "jpg"), "%T" for the MIME type of the image  (e.g.  "image/jpeg"),
              "%v"  for  the single-character calculated validity of the image being viewed (e.g. "f"), "%V" for the calculated validity as a string (e.g.  "full"), "%U" for a base32 encoded hash of the user ID, and "%%"
              for an actual percent sign. If neither %i or %I are present, then the photo will be supplied to the viewer on standard input.

              On Unix the default viewer is xxllooaaddiimmaaggee --ffoorrkk --qquuiieett --ttiittllee ''KKeeyyIIDD 00xx%%kk'' SSTTDDIINN with a fallback to ddiissppllaayy --ttiittllee ''KKeeyyIIDD 00xx%%kk'' %%ii and finally to xxddgg--ooppeenn %%ii.  On Windows !!SShheellllEExxeeccuuttee 440000 %%ii is  used;  here
              the  command  is a meta command to use that API call followed by a wait time in milliseconds which is used to give the viewer time to read the temporary image file before gpg deletes it again.  Note that if
              your image viewer program is not secure, then executing it from gpg does not make it secure.

       ----eexxeecc--ppaatthh _s_t_r_i_n_g
              Sets a list of directories to search for photo viewers If not provided photo viewers use the PPAATTHH environment variable.

       ----kkeeyyrriinngg _f_i_l_e
              Add _f_i_l_e to the current list of keyrings. If _f_i_l_e begins with a tilde and a slash, these are replaced by the $HOME directory. If the filename does not contain a slash, it is assumed to be in the GnuPG  home
              directory ("~/.gnupg" if ----hhoommeeddiirr or $GNUPGHOME is not used).

              Note that this adds a keyring to the current list. If the intent is to use the specified keyring alone, use ----kkeeyyrriinngg along with ----nnoo--ddeeffaauulltt--kkeeyyrriinngg.

              If the option ----nnoo--kkeeyyrriinngg has been used no keyrings will be used at all.

       ----sseeccrreett--kkeeyyrriinngg _f_i_l_e
              This is an obsolete option and ignored.  All secret keys are stored in the ‘_p_r_i_v_a_t_e_-_k_e_y_s_-_v_1_._d’ directory below the GnuPG home directory.

       ----pprriimmaarryy--kkeeyyrriinngg _f_i_l_e
              Designate _f_i_l_e as the primary public keyring. This means that newly imported keys (via ----iimmppoorrtt or keyserver ----rreeccvv--ffrroomm) will go to this keyring.

       ----ttrruussttddbb--nnaammee _f_i_l_e
              Use  _f_i_l_e  instead of the default trustdb. If _f_i_l_e begins with a tilde and a slash, these are replaced by the $HOME directory. If the filename does not contain a slash, it is assumed to be in the GnuPG home
              directory (‘_~_/_._g_n_u_p_g’ if ----hhoommeeddiirr or $GNUPGHOME is not used).

       ----hhoommeeddiirr _d_i_r
              Set the name of the home directory to _d_i_r. If this option is not used, the home directory defaults to ‘_~_/_._g_n_u_p_g’.  It is only recognized when given on the command line.  It also overrides any home directory
              stated through the environment variable ‘_G_N_U_P_G_H_O_M_E’ or (on Windows systems) by means of the Registry entry _H_K_C_U_\_S_o_f_t_w_a_r_e_\_G_N_U_\_G_n_u_P_G_:_H_o_m_e_D_i_r.

              On Windows systems it is possible to install GnuPG as a portable application.  In this case only this command line option is considered, all other ways to set a home directory are ignored.

              To  install GnuPG as a portable application under Windows, create an empty file named ‘_g_p_g_c_o_n_f_._c_t_l’ in the same directory as the tool ‘_g_p_g_c_o_n_f_._e_x_e’.  The root of the installation is then that directory; or,
              if ‘_g_p_g_c_o_n_f_._e_x_e’ has been installed directly below a directory named ‘_b_i_n’, its parent directory.  You also need to make sure that the following directories exist and are writable: ‘_R_O_O_T_/_h_o_m_e’ for the GnuPG
              home and ‘_R_O_O_T_/_v_a_r_/_l_i_b_/_c_a_c_h_e_/_g_n_u_p_g’ for internal cache files.

       ----ddiissppllaayy--cchhaarrsseett _n_a_m_e
              Set  the  name of the native character set. This is used to convert some informational strings like user IDs to the proper UTF-8 encoding.  Note that this has nothing to do with the character set of data to
              be encrypted or signed; GnuPG does not recode user-supplied data. If this option is not used, the default character set is determined from the current locale. A verbosity level of 3 shows  the  chosen  set.
              Valid values for _n_a_m_e are:

              iissoo--88885599--11
                     This is the Latin 1 set.

              iissoo--88885599--22
                     The Latin 2 set.

              iissoo--88885599--1155
                     This is currently an alias for the Latin 1 set.

              kkooii88--rr The usual Russian set (RFC-1489).

              uuttff--88  Bypass all translations and assume that the OS uses native UTF-8 encoding.

       ----uuttff88--ssttrriinnggss
       ----nnoo--uuttff88--ssttrriinnggss
              Assume  that  command line arguments are given as UTF-8 strings. The default (----nnoo--uuttff88--ssttrriinnggss) is to assume that arguments are encoded in the character set as specified by ----ddiissppllaayy--cchhaarrsseett. These options
              affect all following arguments. Both options may be used multiple times.

       ----ooppttiioonnss _f_i_l_e
              Read options from _f_i_l_e and do not try to read them from the default options file in the homedir (see ----hhoommeeddiirr). This option is ignored if used in an options file.

       ----nnoo--ooppttiioonnss
              Shortcut for ----ooppttiioonnss //ddeevv//nnuullll. This option is detected before an attempt to open an option file.  Using this option will also prevent the creation of a ‘_~_/_._g_n_u_p_g’ homedir.

       --zz _n
       ----ccoommpprreessss--lleevveell _n
       ----bbzziipp22--ccoommpprreessss--lleevveell _n
              Set compression level to _n for the ZIP and ZLIB compression algorithms. The default is to use the default compression level of zlib (normally 6). ----bbzziipp22--ccoommpprreessss--lleevveell sets the compression  level  for  the
              BZIP2  compression algorithm (defaulting to 6 as well). This is a different option from ----ccoommpprreessss--lleevveell since BZIP2 uses a significant amount of memory for each additional compression level.  --zz sets both.
              A value of 0 for _n disables compression.

       ----bbzziipp22--ddeeccoommpprreessss--lloowwmmeemm
              Use a different decompression method for BZIP2 compressed files. This alternate method uses a bit more than half the memory, but also runs at half the speed. This is useful under extreme low memory  circum‐
              stances when the file was originally compressed at a high ----bbzziipp22--ccoommpprreessss--lleevveell.

       ----mmaannggllee--ddooss--ffiilleennaammeess
       ----nnoo--mmaannggllee--ddooss--ffiilleennaammee